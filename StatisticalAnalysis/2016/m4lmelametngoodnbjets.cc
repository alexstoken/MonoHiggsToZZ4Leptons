// -------------------------------------------------------------------------
// double m4lmelametngoodnbjets(double f_mass4l,
//                              double f_D_bkg_kin,
//                              double f_pfmet,
//                              double f_Ngood,
//                              double f_Nbjets)
//
// To compile in PyROOT:
//   code = open(filename).read()  # read code
//   gROOT.ProcessLine(code)       # compile code
//      :    :
//   D = m4lmelametngoodnbjets(...)
//
// created: Wed Feb  8 10:14:28 2017
// -------------------------------------------------------------------------
//
//
// Class: ReadBDT
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : BDT::BDT
TMVA Release   : 4.2.0         [262656]
ROOT Release   : 5.34/28       [336412]
Creator        : dustin
Date           : Wed Feb  8 10:14:07 2017
Host           : Linux ec-ubuntu-14-04-x86-64-2 3.13.0-37-generic #64-Ubuntu SMP Mon Sep 22 21:28:38 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
Dir            : /home/dustin/Research/MonoHiggs/MVA
Training events: 20000
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
NTrees: "100" [Number of trees in the forest]
MinNodeSize: "1.0" [Minimum percentage of training events required in a leaf node (default: Classification: 5%, Regression: 0.2%)]
nCuts: "100" [Number of grid points in variable range used in finding optimal cut in node splitting]
BoostType: "AdaBoost" [Boosting type for the trees in the forest (note: AdaCost is still experimental)]
# Default:
VerbosityLevel: "Default" [Verbosity level]
VarTransform: "None" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "False" [Print method-specific help message]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
MaxDepth: "3" [Max depth of the decision tree allowed]
AdaBoostR2Loss: "quadratic" [Type of Loss function in AdaBoostR2]
UseBaggedBoost: "False" [Use only a random subsample of all events for growing the trees in each boost iteration.]
Shrinkage: "1.000000e+00" [Learning rate for GradBoost algorithm]
AdaBoostBeta: "5.000000e-01" [Learning rate  for AdaBoost algorithm]
UseRandomisedTrees: "False" [Determine at each node splitting the cut variable only as the best out of a random subset of variables (like in RandomForests)]
UseNvars: "2" [Size of the subset of variables used with RandomisedTree option]
UsePoissonNvars: "True" [Interpret "UseNvars" not as fixed number but as mean of a Possion distribution in each split with RandomisedTree option]
BaggedSampleFraction: "6.000000e-01" [Relative size of bagged event sample to original size of the data sample (used whenever bagging is used (i.e. UseBaggedBoost, Bagging,)]
UseYesNoLeaf: "True" [Use Sig or Bkg categories, or the purity=S/(S+B) as classification of the leaf node -> Real-AdaBoost]
NegWeightTreatment: "inverseboostnegweights" [How to treat events with negative weights in the BDT training (particular the boosting) : IgnoreInTraining;  Boost With inverse boostweight; Pair events with negative and positive weights in traning sample and *annihilate* them (experimental!)]
Css: "1.000000e+00" [AdaCost: cost of true signal selected signal]
Cts_sb: "1.000000e+00" [AdaCost: cost of true signal selected bkg]
Ctb_ss: "1.000000e+00" [AdaCost: cost of true bkg    selected signal]
Cbb: "1.000000e+00" [AdaCost: cost of true bkg    selected bkg ]
NodePurityLimit: "5.000000e-01" [In boosting/pruning, nodes with purity > NodePurityLimit are signal; background otherwise.]
SeparationType: "giniindex" [Separation criterion for node splitting]
DoBoostMonitor: "False" [Create control plot with ROC integral vs tree number]
UseFisherCuts: "False" [Use multivariate splits using the Fisher criterion]
MinLinCorrForFisher: "8.000000e-01" [The minimum linear correlation between two variables demanded for use in Fisher criterion in node splitting]
UseExclusiveVars: "False" [Variables already used in fisher criterion are not anymore analysed individually for node splitting]
DoPreselection: "False" [and and apply automatic pre-selection for 100% efficient signal (bkg) cuts prior to training]
SigToBkgFraction: "1.000000e+00" [Sig to Bkg ratio used in Training (similar to NodePurityLimit, which cannot be used in real adaboost]
PruneMethod: "nopruning" [Note: for BDTs use small trees (e.g.MaxDepth=3) and NoPruning:  Pruning: Method used for pruning (removal) of statistically insignificant branches ]
PruneStrength: "0.000000e+00" [Pruning strength]
PruningValFraction: "5.000000e-01" [Fraction of events to use for optimizing automatic pruning.]
nEventsMin: "0" [deprecated: Use MinNodeSize (in % of training events) instead]
UseBaggedGrad: "False" [deprecated: Use *UseBaggedBoost* instead:  Use only a random subsample of all events for growing the trees in each iteration.]
GradBaggingFraction: "6.000000e-01" [deprecated: Use *BaggedSampleFraction* instead: Defines the fraction of events to be used in each iteration, e.g. when UseBaggedGrad=kTRUE. ]
UseNTrainEvents: "0" [deprecated: Use *BaggedSampleFraction* instead: Number of randomly picked training events used in randomised (and bagged) trees]
NNodesMax: "0" [deprecated: Use MaxDepth instead to limit the tree size]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 5
f_mass4l                      f_mass4l                      f_mass4l                      f_mass4l                                                        'D'    [70.087677002,1526.62524414]
f_D_bkg_kin                   f_D_bkg_kin                   f_D_bkg_kin                   f_D_bkg_kin                                                     'D'    [1.75957006832e-06,0.996460556984]
f_pfmet                       f_pfmet                       f_pfmet                       f_pfmet                                                         'D'    [0.12551432848,1092.82128906]
f_Ngood                       f_Ngood                       f_Ngood                       f_Ngood                                                         'D'    [4,8]
f_Nbjets                      f_Nbjets                      f_Nbjets                      f_Nbjets                                                        'D'    [0,4]
NSpec 0


============================================================================ */

#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#define NN new BDTNode
   
#ifndef BDTNode__def
#define BDTNode__def
   
class BDTNode {
   
public:
   
   // constructor of an essentially "empty" node floating in space
   BDTNode ( BDTNode* left,BDTNode* right,
                          int selector, double cutValue, bool cutType, 
                          int nodeType, double purity, double response ) :
   fLeft         ( left         ),
   fRight        ( right        ),
   fSelector     ( selector     ),
   fCutValue     ( cutValue     ),
   fCutType      ( cutType      ),
   fNodeType     ( nodeType     ),
   fPurity       ( purity       ),
   fResponse     ( response     ){
   }

   virtual ~BDTNode();

   // test event if it decends the tree at this node to the right
   virtual bool GoesRight( const std::vector<double>& inputValues ) const;
   BDTNode* GetRight( void )  {return fRight; };

   // test event if it decends the tree at this node to the left 
   virtual bool GoesLeft ( const std::vector<double>& inputValues ) const;
   BDTNode* GetLeft( void ) { return fLeft; };   

   // return  S/(S+B) (purity) at this node (from  training)

   double GetPurity( void ) const { return fPurity; } 
   // return the node type
   int    GetNodeType( void ) const { return fNodeType; }
   double GetResponse(void) const {return fResponse;}

private:

   BDTNode*   fLeft;     // pointer to the left daughter node
   BDTNode*   fRight;    // pointer to the right daughter node
   int                     fSelector; // index of variable used in node selection (decision tree)   
   double                  fCutValue; // cut value appplied on this node to discriminate bkg against sig
   bool                    fCutType;  // true: if event variable > cutValue ==> signal , false otherwise
   int                     fNodeType; // Type of node: -1 == Bkg-leaf, 1 == Signal-leaf, 0 = internal 
   double                  fPurity;   // Purity of node from training
   double                  fResponse; // Regression response value of node
}; 
   
//_______________________________________________________________________
   BDTNode::~BDTNode()
{
   if (fLeft  != NULL) delete fLeft;
   if (fRight != NULL) delete fRight;
}; 
   
//_______________________________________________________________________
bool BDTNode::GoesRight( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the right
   bool result;
     result = (inputValues[fSelector] > fCutValue );
   if (fCutType == true) return result; //the cuts are selecting Signal ;
   else return !result;
}
   
//_______________________________________________________________________
bool BDTNode::GoesLeft( const std::vector<double>& inputValues ) const
{
   // test event if it decends the tree at this node to the left
   if (!this->GoesRight(inputValues)) return true;
   else return false;
}
   
#endif
   
#ifndef IClassifierReader__def
#define IClassifierReader__def

namespace {
class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadBDT : public IClassifierReader {

 public:

   // constructor
   ReadBDT( std::vector<std::string>& theInputVars ) 
      : IClassifierReader(),
        fClassName( "ReadBDT" ),
        fNvars( 5 ),
        fIsNormalised( false )
   {      
      // the training input variables
      const char* inputVars[] = { "f_mass4l", "f_D_bkg_kin", "f_pfmet", "f_Ngood", "f_Nbjets" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = 0;
      fVmax[0] = 0;
      fVmin[1] = 0;
      fVmax[1] = 0;
      fVmin[2] = 0;
      fVmax[2] = 0;
      fVmin[3] = 0;
      fVmax[3] = 0;
      fVmin[4] = 0;
      fVmax[4] = 0;

      // initialize input variable types
      fType[0] = 'D';
      fType[1] = 'D';
      fType[2] = 'D';
      fType[3] = 'D';
      fType[4] = 'D';

      // initialize constants
      Initialize();

   }

   // destructor
   virtual ~ReadBDT() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the 
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const;

 private:

   // method-specific destructor
   void Clear();

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   const bool fIsNormalised;
   bool IsNormalised() const { return fIsNormalised; }
   double fVmin[5];
   double fVmax[5];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[5];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)
   std::vector<BDTNode*> fForest;       // i.e. root nodes of decision trees
   std::vector<double>                fBoostWeights; // the weights applied in the individual boosts
};

double ReadBDT::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   double myMVA = 0;
   double norm  = 0;
   for (unsigned int itree=0; itree<fForest.size(); itree++){
      BDTNode *current = fForest[itree];
      while (current->GetNodeType() == 0) { //intermediate node
         if (current->GoesRight(inputValues)) current=(BDTNode*)current->GetRight();
         else current=(BDTNode*)current->GetLeft();
      }
      myMVA += fBoostWeights[itree] *  current->GetNodeType();
      norm  += fBoostWeights[itree];
   }
   return myMVA /= norm;
};

void ReadBDT::Initialize()
{
  // itree = 0
  fBoostWeights.push_back(1.56547981303973);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 32.5818, 0, 1, 0.937686,-99) , 
NN(
0, 
0, 
-1, 46.1149, 0, -1, 0.0952384,-99) , 
0, 108.6, 0, 0, 0.82571,-99) , 
NN(
0, 
0, 
-1, 56.4763, 0, -1, 0.00401945,-99) , 
0, 142.193, 1, 0, 0.5,-99)    );
  // itree = 1
  fBoostWeights.push_back(1.14192);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.081499, 0, 1, 0.979498,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.288679,-99) , 
0, 150.99, 1, 0, 0.955031,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.54301,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.101126,-99) , 
0, 117.71, 0, 0, 0.377278,-99) , 
NN(
0, 
0, 
-1, 142.434, 1, -1, 0.0104621,-99) , 
0, 128.579, 1, 0, 0.152461,-99) , 
2, 54.2194, 0, 0, 0.461805,-99)    );
  // itree = 2
  fBoostWeights.push_back(1.05631);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 94.9717, 0, 1, 0.984899,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.814189,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.0956997,-99) , 
0, 129.735, 1, 0, 0.681846,-99) , 
2, 74.7914, 0, 0, 0.918094,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.547316,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.153365,-99) , 
2, 33.3235, 0, 0, 0.265641,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
0, 142.992, 1, 0, 0.154164,-99) , 
2, 54.2194, 0, 0, 0.415846,-99)    );
  // itree = 3
  fBoostWeights.push_back(0.725965);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 95.5721, 0, 1, 0.933797,-99) , 
NN(
0, 
0, 
-1, 142.992, 1, -1, 0.232561,-99) , 
2, 65.0381, 0, 0, 0.413211,-99)    );
  // itree = 4
  fBoostWeights.push_back(0.557528);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 110.975, 0, 1, 0.92948,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.62217,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.368323,-99) , 
1, 0.471635, 0, 0, 0.51292,-99) , 
2, 75.8569, 0, 0, 0.611398,-99) , 
NN(
0, 
0, 
-1, 56.4763, 0, -1, 0.0151293,-99) , 
0, 171.036, 1, 0, 0.496839,-99)    );
  // itree = 5
  fBoostWeights.push_back(0.417777);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 127.484, 1, 1, 0.976598,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.550465,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.142427,-99) , 
0, 95.4961, 0, 0, 0.506541,-99) , 
2, 97.4944, 0, 0, 0.576154,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.516923,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 62.733, 0, 0, 0.0395175,-99) , 
0, 156.615, 1, 0, 0.482981,-99)    );
  // itree = 6
  fBoostWeights.push_back(0.453631);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 96.6502, 0, 1, 0.895494,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.581678,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.36865,-99) , 
2, 45.5354, 0, 0, 0.420411,-99) , 
NN(
0, 
0, 
-1, 52.3462, 0, -1, 0.0126094,-99) , 
0, 142.992, 1, 0, 0.348746,-99) , 
2, 86.6757, 0, 0, 0.422333,-99)    );
  // itree = 7
  fBoostWeights.push_back(0.261663);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 127.484, 1, 1, 0.945825,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504194,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.211626,-99) , 
0, 95.4961, 0, 0, 0.475769,-99) , 
2, 97.4944, 0, 0, 0.526623,-99) , 
NN(
0, 
0, 
-1, 62.733, 0, -1, 0.0386763,-99) , 
0, 156.615, 1, 0, 0.461524,-99)    );
  // itree = 8
  fBoostWeights.push_back(0.316915);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0.148217, 0, 1, 0.900273,-99) , 
NN(
0, 
0, 
-1, 157.405, 1, -1, 0.371915,-99) , 
2, 97.4944, 0, 0, 0.420972,-99)    );
  // itree = 9
  fBoostWeights.push_back(0.22859);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 117.228, 0, 1, 0.907616,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523332,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.313597,-99) , 
4, 0.029703, 1, 0, 0.505334,-99) , 
2, 97.4944, 0, 0, 0.540399,-99) , 
NN(
0, 
0, 
-1, 56.4763, 0, -1, 0.0811986,-99) , 
0, 142.193, 1, 0, 0.484192,-99)    );
  // itree = 10
  fBoostWeights.push_back(0.216337);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 127.929, 1, 1, 0.851045,-99) , 
NN(
0, 
0, 
-1, 14.5861, 0, -1, 0.454734,-99) , 
2, 97.4944, 0, 0, 0.488447,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.0464734,-99) , 
0, 171.036, 1, 0, 0.447707,-99)    );
  // itree = 11
  fBoostWeights.push_back(0.210861);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 127.929, 1, 1, 0.821491,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.535213,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.365513,-99) , 
2, 14.5861, 0, 0, 0.508693,-99) , 
2, 97.4944, 0, 0, 0.533672,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.0570573,-99) , 
0, 171.036, 1, 0, 0.493102,-99)    );
  // itree = 12
  fBoostWeights.push_back(0.163397);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 146.791, 0, 1, 0.83675,-99) , 
NN(
0, 
0, 
-1, 95.4961, 0, -1, 0.472776,-99) , 
2, 97.4944, 0, 0, 0.498508,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502872,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 62.733, 0, 0, 0.0908244,-99) , 
0, 156.615, 1, 0, 0.462524,-99)    );
  // itree = 13
  fBoostWeights.push_back(0.18288);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 146.791, 0, 1, 0.813186,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531004,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.32835,-99) , 
0, 95.4961, 0, 0, 0.513595,-99) , 
2, 97.4944, 0, 0, 0.533774,-99) , 
NN(
0, 
0, 
-1, 62.733, 0, -1, 0.0893996,-99) , 
0, 156.615, 1, 0, 0.496685,-99)    );
  // itree = 14
  fBoostWeights.push_back(0.177159);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 146.791, 0, 1, 0.783802,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521678,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.429883,-99) , 
1, 0.540477, 1, 0, 0.475644,-99) , 
2, 97.4944, 0, 0, 0.495436,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507742,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 62.733, 0, 0, 0.105448,-99) , 
0, 156.615, 1, 0, 0.464818,-99)    );
  // itree = 15
  fBoostWeights.push_back(0.139439);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 148.059, 0, 1, 0.793952,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505005,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.315767,-99) , 
1, 0.188955, 0, 0, 0.480549,-99) , 
2, 119.132, 0, 0, 0.495427,-99) , 
NN(
0, 
0, 
-1, 56.4763, 0, -1, 0.132253,-99) , 
0, 142.193, 1, 0, 0.463784,-99)    );
  // itree = 16
  fBoostWeights.push_back(0.159739);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 169.059, 1, 1, 0.796732,-99) , 
NN(
0, 
0, 
-1, 0.0889255, 0, -1, 0.452876,-99) , 
2, 140.77, 0, 0, 0.465372,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.563197,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 56.4763, 0, 0, 0.0917941,-99) , 
0, 171.036, 1, 0, 0.442311,-99)    );
  // itree = 17
  fBoostWeights.push_back(0.0960798);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 125.493, 1, 1, 0.755102,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503845,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.27911,-99) , 
1, 0.0889255, 0, 0, 0.491824,-99) , 
2, 129.951, 0, 0, 0.502346,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.523585,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 56.4763, 0, 0, 0.090676,-99) , 
0, 171.036, 1, 0, 0.478368,-99)    );
  // itree = 18
  fBoostWeights.push_back(0.117878);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 125.493, 1, 1, 0.736902,-99) , 
NN(
0, 
0, 
-1, 137.296, 1, -1, 0.470346,-99) , 
2, 129.951, 0, 0, 0.480764,-99) , 
NN(
0, 
0, 
-1, 56.4763, 0, -1, 0.0899277,-99) , 
0, 171.036, 1, 0, 0.45881,-99)    );
  // itree = 19
  fBoostWeights.push_back(0.0944568);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 86.6757, 0, 1, 0.517948,-99) , 
NN(
0, 
0, 
-1, 0.326728, 1, -1, 0.289555,-99) , 
0, 137.021, 1, 0, 0.507934,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529019,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 56.4763, 0, 0, 0.100053,-99) , 
0, 171.036, 1, 0, 0.485977,-99)    );
  // itree = 20
  fBoostWeights.push_back(0.178749);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.678231,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.329973,-99) , 
0, 111.972, 0, 0, 0.615335,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.564081,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.443385,-99) , 
1, 0.746671, 0, 0, 0.470622,-99) , 
2, 75.8569, 0, 0, 0.486372,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505438,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 56.4763, 0, 0, 0.0991774,-99) , 
0, 171.036, 1, 0, 0.466249,-99)    );
  // itree = 21
  fBoostWeights.push_back(0.113927);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.606482,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.493838,-99) , 
2, 54.2194, 0, 0, 0.517073,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.571626,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.286783,-99) , 
1, 0.679233, 0, 0, 0.376245,-99) , 
4, 0.039604, 1, 0, 0.505131,-99) , 
NN(
0, 
0, 
-1, 56.4763, 0, -1, 0.0973288,-99) , 
0, 171.036, 1, 0, 0.485143,-99)    );
  // itree = 22
  fBoostWeights.push_back(0.122399);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 97.4944, 0, 1, 0.536305,-99) , 
NN(
0, 
0, 
-1, 54.2539, 1, -1, 0.382006,-99) , 
4, 0.039604, 1, 0, 0.523371,-99) , 
NN(
0, 
0, 
-1, 62.733, 0, -1, 0.135918,-99) , 
0, 156.615, 1, 0, 0.50195,-99)    );
  // itree = 23
  fBoostWeights.push_back(0.141495);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.545289,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.446695,-99) , 
0, 122.902, 0, 0, 0.508945,-99) , 
NN(
0, 
0, 
-1, 0.486485, 1, -1, 0.379813,-99) , 
0, 130.028, 1, 0, 0.496445,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.519822,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 56.4763, 0, 0, 0.120158,-99) , 
0, 171.036, 1, 0, 0.479455,-99)    );
  // itree = 24
  fBoostWeights.push_back(0.166144);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.673981,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47196,-99) , 
2, 24.8654, 0, 0, 0.529105,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.572476,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.432438,-99) , 
2, 85.0764, 0, 0, 0.454712,-99) , 
2, 32.5818, 1, 0, 0.491415,-99) , 
NN(
0, 
0, 
-1, 56.4763, 0, -1, 0.118164,-99) , 
0, 171.036, 1, 0, 0.475329,-99)    );
  // itree = 25
  fBoostWeights.push_back(0.157797);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.633959,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488509,-99) , 
1, 0.342951, 0, 0, 0.552782,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.628264,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.449226,-99) , 
0, 119.115, 1, 0, 0.481494,-99) , 
1, 0.532829, 1, 0, 0.516381,-99) , 
NN(
0, 
0, 
-1, 62.733, 0, -1, 0.167686,-99) , 
0, 156.615, 1, 0, 0.499301,-99)    );
  // itree = 26
  fBoostWeights.push_back(0.12543);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 24.8654, 0, 1, 0.560607,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522166,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.35818,-99) , 
0, 102.997, 0, 0, 0.501071,-99) , 
2, 32.5818, 1, 0, 0.530394,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.595674,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 62.733, 0, 0, 0.156304,-99) , 
0, 171.036, 1, 0, 0.51578,-99)    );
  // itree = 27
  fBoostWeights.push_back(0.188465);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.674083,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.350007,-99) , 
1, 0.385187, 0, 0, 0.56284,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.576659,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.445374,-99) , 
1, 0.424319, 1, 0, 0.490362,-99) , 
0, 118.918, 1, 0, 0.504638,-99) , 
NN(
0, 
0, 
-1, 62.733, 0, -1, 0.186005,-99) , 
0, 156.615, 1, 0, 0.49012,-99)    );
  // itree = 28
  fBoostWeights.push_back(0.10985);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.538323,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.460025,-99) , 
1, 0.317618, 0, 0, 0.519738,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.537982,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.190297,-99) , 
2, 34.8213, 0, 0, 0.351576,-99) , 
0, 137.468, 1, 0, 0.512259,-99) , 
NN(
0, 
0, 
-1, 43.9631, 0, -1, 0.163391,-99) , 
0, 185.457, 1, 0, 0.500836,-99)    );
  // itree = 29
  fBoostWeights.push_back(0.0591118);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509136,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.356605,-99) , 
0, 137.468, 1, 0, 0.502481,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.208746,-99) , 
4, 1.0297, 1, 0, 0.498571,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.562234,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.178967,-99) , 
0, 185.457, 1, 0, 0.488431,-99)    );
  // itree = 30
  fBoostWeights.push_back(0.067109);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.654119,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484136,-99) , 
2, 140.77, 0, 0, 0.488987,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.218678,-99) , 
4, 1.0297, 1, 0, 0.485446,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.547635,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.177461,-99) , 
0, 185.457, 1, 0, 0.475867,-99)    );
  // itree = 31
  fBoostWeights.push_back(0.0634951);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512639,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.404204,-99) , 
0, 95.2126, 0, 0, 0.504807,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.23036,-99) , 
4, 1.0297, 1, 0, 0.501275,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.530963,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.175674,-99) , 
0, 185.457, 1, 0, 0.491365,-99)    );
  // itree = 32
  fBoostWeights.push_back(0.0432563);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 1.0297, 1, -1, 0.488061,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.515124,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.173904,-99) , 
0, 185.457, 1, 0, 0.47869,-99)    );
  // itree = 33
  fBoostWeights.push_back(0.04936);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507549,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.379225,-99) , 
0, 137.468, 1, 0, 0.502034,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.249829,-99) , 
4, 1.0297, 1, 0, 0.498873,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504315,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.172655,-99) , 
0, 185.457, 1, 0, 0.489275,-99)    );
  // itree = 34
  fBoostWeights.push_back(0.0561126);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.62449,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486871,-99) , 
2, 140.77, 0, 0, 0.490751,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.259193,-99) , 
4, 1.0297, 1, 0, 0.487882,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.171185,-99) , 
0, 185.457, 1, 0, 0.478705,-99)    );
  // itree = 35
  fBoostWeights.push_back(0.0489096);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508871,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.398422,-99) , 
1, 0.0790064, 0, 0, 0.503988,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.270112,-99) , 
4, 1.0297, 1, 0, 0.501127,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506003,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.179294,-99) , 
0, 185.457, 1, 0, 0.491959,-99)    );
  // itree = 36
  fBoostWeights.push_back(0.0681369);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.518673,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47316,-99) , 
1, 0.483475, 1, 0, 0.49284,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.279862,-99) , 
4, 1.0297, 1, 0, 0.490261,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.177735,-99) , 
0, 185.457, 1, 0, 0.481489,-99)    );
  // itree = 37
  fBoostWeights.push_back(0.0819569);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525319,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.470888,-99) , 
2, 32.5818, 1, 0, 0.497711,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.545038,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.229267,-99) , 
2, 34.8213, 0, 0, 0.379998,-99) , 
0, 137.468, 1, 0, 0.492729,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510808,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.187912,-99) , 
0, 185.457, 1, 0, 0.484342,-99)    );
  // itree = 38
  fBoostWeights.push_back(0.0541734);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507012,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.368551,-99) , 
0, 137.468, 1, 0, 0.501695,-99) , 
NN(
0, 
0, 
-1, 6.2222, 0, -1, 0.414958,-99) , 
2, 10.9443, 0, 0, 0.493033,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.185067,-99) , 
0, 185.457, 1, 0, 0.484753,-99)    );
  // itree = 39
  fBoostWeights.push_back(0.0954527);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.609726,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.473247,-99) , 
0, 117.545, 1, 0, 0.489023,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.405411,-99) , 
0, 95.2126, 0, 0, 0.483116,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503864,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.193378,-99) , 
0, 185.457, 1, 0, 0.475448,-99)    );
  // itree = 40
  fBoostWeights.push_back(0.0765822);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.579848,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489887,-99) , 
2, 54.2194, 0, 0, 0.50828,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.525657,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.223746,-99) , 
2, 67.5675, 1, 0, 0.430511,-99) , 
4, 0.039604, 1, 0, 0.501845,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.189759,-99) , 
0, 185.457, 1, 0, 0.493792,-99)    );
  // itree = 41
  fBoostWeights.push_back(0.0935196);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528994,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.458851,-99) , 
1, 0.187571, 0, 0, 0.519628,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.6034,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.332897,-99) , 
1, 0.677997, 0, 0, 0.422818,-99) , 
4, 0.039604, 1, 0, 0.511662,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.201814,-99) , 
0, 185.457, 1, 0, 0.503835,-99)    );
  // itree = 42
  fBoostWeights.push_back(0.0500702);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.641048,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.49417,-99) , 
0, 109.506, 1, 0, 0.502354,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.421034,-99) , 
0, 95.2126, 0, 0, 0.496579,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522511,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.217299,-99) , 
0, 185.457, 1, 0, 0.48969,-99)    );
  // itree = 43
  fBoostWeights.push_back(0.0809917);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.305904, 1, 1, 0.522322,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528915,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.387106,-99) , 
0, 118.978, 1, 0, 0.474453,-99) , 
0, 122.622, 0, 0, 0.507805,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510007,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.215106,-99) , 
0, 185.457, 1, 0, 0.500686,-99)    );
  // itree = 44
  fBoostWeights.push_back(0.0509033);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.610366,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.491796,-99) , 
0, 109.506, 1, 0, 0.498314,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.413515,-99) , 
0, 95.2126, 0, 0, 0.492261,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.21142,-99) , 
0, 185.457, 1, 0, 0.48557,-99)    );
  // itree = 45
  fBoostWeights.push_back(0.0522872);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.561171,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496107,-99) , 
1, 0.296039, 1, 0, 0.509645,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.425912,-99) , 
0, 95.2126, 0, 0, 0.503689,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502487,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.220031,-99) , 
0, 185.457, 1, 0, 0.497021,-99)    );
  // itree = 46
  fBoostWeights.push_back(0.0702023);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520723,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.329879,-99) , 
0, 146.604, 1, 0, 0.517993,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.530049,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.247141,-99) , 
2, 67.5675, 1, 0, 0.441342,-99) , 
4, 0.039604, 1, 0, 0.511718,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.217488,-99) , 
0, 185.457, 1, 0, 0.504895,-99)    );
  // itree = 47
  fBoostWeights.push_back(0.0608872);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.545932,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.487269,-99) , 
1, 0.749833, 0, 0, 0.501156,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.422416,-99) , 
0, 95.2126, 0, 0, 0.495527,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506965,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.229672,-99) , 
0, 185.457, 1, 0, 0.489469,-99)    );
  // itree = 48
  fBoostWeights.push_back(0.0806815);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.542758,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.476935,-99) , 
0, 123.764, 0, 0, 0.519848,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.504917,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.338897,-99) , 
1, 0.709612, 0, 0, 0.475016,-99) , 
1, 0.670912, 1, 0, 0.504061,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.226496,-99) , 
0, 185.457, 1, 0, 0.497831,-99)    );
  // itree = 49
  fBoostWeights.push_back(0.0809483);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.538924,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.474456,-99) , 
1, 0.318884, 0, 0, 0.513762,-99) , 
NN(
0, 
0, 
-1, 0.709612, 0, -1, 0.462017,-99) , 
1, 0.670912, 1, 0, 0.495537,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511912,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.240942,-99) , 
0, 185.457, 1, 0, 0.489931,-99)    );
  // itree = 50
  fBoostWeights.push_back(0.069701);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.597957,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.531114,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47587,-99) , 
1, 0.424285, 1, 0, 0.495236,-99) , 
0, 90.6444, 1, 0, 0.499786,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.236364,-99) , 
0, 185.457, 1, 0, 0.494093,-99)    );
  // itree = 51
  fBoostWeights.push_back(0.0553642);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513632,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.428702,-99) , 
0, 92.7448, 0, 0, 0.508251,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.552462,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.265391,-99) , 
2, 34.8213, 0, 0, 0.405873,-99) , 
0, 137.468, 1, 0, 0.503998,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509101,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.249174,-99) , 
0, 185.457, 1, 0, 0.498579,-99)    );
  // itree = 52
  fBoostWeights.push_back(0.0419466);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.594506,-99) , 
NN(
0, 
0, 
-1, 102.853, 0, -1, 0.487683,-99) , 
0, 90.6444, 1, 0, 0.492418,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.245812,-99) , 
0, 185.457, 1, 0, 0.487242,-99)    );
  // itree = 53
  fBoostWeights.push_back(0.0366101);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508096,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.417949,-99) , 
1, 0.0790064, 0, 0, 0.50416,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.310589,-99) , 
4, 1.0297, 1, 0, 0.501975,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505747,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 50.2197, 0, 0, 0.253671,-99) , 
0, 185.457, 1, 0, 0.496814,-99)    );
  // itree = 54
  fBoostWeights.push_back(0.0397669);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.560503,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490622,-99) , 
2, 86.6757, 0, 0, 0.495806,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.318482,-99) , 
4, 1.0297, 1, 0, 0.493817,-99) , 
NN(
0, 
0, 
-1, 50.2197, 0, -1, 0.251348,-99) , 
0, 185.457, 1, 0, 0.488821,-99)    );
  // itree = 55
  fBoostWeights.push_back(0.0230452);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.947135, 0, 1, 0.504274,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.327175,-99) , 
4, 1.0297, 1, 0, 0.502301,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.528562,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 56.4763, 0, 0, 0.258905,-99) , 
0, 185.457, 1, 0, 0.497331,-99)    );
  // itree = 56
  fBoostWeights.push_back(0.0267359);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.617486,-99) , 
NN(
0, 
0, 
-1, 0.039604, 1, -1, 0.493887,-99) , 
1, 0.947135, 0, 0, 0.496668,-99) , 
NN(
0, 
0, 
-1, 0.281153, 1, -1, 0.257518,-99) , 
0, 185.457, 1, 0, 0.491813,-99)    );
  // itree = 57
  fBoostWeights.push_back(0.0459909);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.511423,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.4371,-99) , 
0, 92.7448, 0, 0, 0.506761,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508744,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.230557,-99) , 
1, 0.326689, 1, 0, 0.41595,-99) , 
0, 137.468, 1, 0, 0.503051,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.529482,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 56.4763, 0, 0, 0.262663,-99) , 
0, 185.457, 1, 0, 0.498202,-99)    );
  // itree = 58
  fBoostWeights.push_back(0.0393498);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.594546,-99) , 
NN(
0, 
0, 
-1, 102.853, 0, -1, 0.488524,-99) , 
0, 90.6444, 1, 0, 0.493246,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.259809,-99) , 
0, 185.457, 1, 0, 0.48859,-99)    );
  // itree = 59
  fBoostWeights.push_back(0.0332813);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.585027,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.503856,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.410452,-99) , 
0, 102.853, 0, 0, 0.498359,-99) , 
0, 90.6444, 1, 0, 0.502208,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.267448,-99) , 
0, 185.457, 1, 0, 0.497565,-99)    );
  // itree = 60
  fBoostWeights.push_back(0.0323999);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.576925,-99) , 
NN(
0, 
0, 
-1, 130.067, 1, -1, 0.491016,-99) , 
0, 90.6444, 1, 0, 0.494822,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.274019,-99) , 
0, 185.457, 1, 0, 0.490487,-99)    );
  // itree = 61
  fBoostWeights.push_back(0.0271711);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505994,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.36497,-99) , 
0, 146.604, 1, 0, 0.504047,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.337338,-99) , 
4, 1.0297, 1, 0, 0.502204,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.280511,-99) , 
0, 185.457, 1, 0, 0.497881,-99)    );
  // itree = 62
  fBoostWeights.push_back(0.025704);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.603194,-99) , 
NN(
0, 
0, 
-1, 0.039604, 1, -1, 0.493287,-99) , 
1, 0.947135, 0, 0, 0.495746,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.286027,-99) , 
0, 185.457, 1, 0, 0.49168,-99)    );
  // itree = 63
  fBoostWeights.push_back(0.0331811);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507975,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.444019,-99) , 
0, 95.2126, 0, 0, 0.503578,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.349213,-99) , 
4, 1.0297, 1, 0, 0.501885,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.291305,-99) , 
0, 185.457, 1, 0, 0.497823,-99)    );
  // itree = 64
  fBoostWeights.push_back(0.0311036);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.576756,-99) , 
NN(
0, 
0, 
-1, 130.067, 1, -1, 0.491101,-99) , 
0, 90.6444, 1, 0, 0.494898,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.298202,-99) , 
0, 185.457, 1, 0, 0.491128,-99)    );
  // itree = 65
  fBoostWeights.push_back(0.045477);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510929,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.45166,-99) , 
2, 10.9443, 0, 0, 0.505244,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.559293,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.291319,-99) , 
2, 34.8213, 0, 0, 0.42485,-99) , 
0, 137.468, 1, 0, 0.501985,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.304752,-99) , 
0, 185.457, 1, 0, 0.498226,-99)    );
  // itree = 66
  fBoostWeights.push_back(0.0752153);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.607151,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.381988,-99) , 
1, 0.385187, 0, 0, 0.529156,-99) , 
NN(
0, 
0, 
-1, 121.169, 0, -1, 0.486108,-99) , 
0, 118.918, 1, 0, 0.494024,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.564979,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 62.733, 0, 0, 0.34761,-99) , 
0, 156.615, 1, 0, 0.489788,-99)    );
  // itree = 67
  fBoostWeights.push_back(0.0457478);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 116.375, 1, 1, 0.513657,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.434531,-99) , 
0, 94.931, 0, 0, 0.508321,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.546411,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 62.733, 0, 0, 0.340491,-99) , 
0, 156.615, 1, 0, 0.503536,-99)    );
  // itree = 68
  fBoostWeights.push_back(0.0539873);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.548065,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.492389,-99) , 
2, 54.2194, 0, 0, 0.50333,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.524529,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.250884,-99) , 
2, 67.5675, 1, 0, 0.442314,-99) , 
4, 0.039604, 1, 0, 0.498427,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.53505,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 62.733, 0, 0, 0.336045,-99) , 
0, 156.615, 1, 0, 0.493839,-99)    );
  // itree = 69
  fBoostWeights.push_back(0.0439354);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 118.851, 1, 1, 0.51153,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51105,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.261166,-99) , 
2, 67.5675, 1, 0, 0.436614,-99) , 
4, 0.039604, 1, 0, 0.505533,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.521598,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 62.733, 0, 0, 0.330688,-99) , 
0, 156.615, 1, 0, 0.500641,-99)    );
  // itree = 70
  fBoostWeights.push_back(0.0504494);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.547174,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.490306,-99) , 
0, 118.851, 1, 0, 0.500548,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.500068,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.269733,-99) , 
2, 67.5675, 1, 0, 0.431938,-99) , 
4, 0.039604, 1, 0, 0.495071,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510626,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0,-99) , 
2, 62.733, 0, 0, 0.326244,-99) , 
0, 156.615, 1, 0, 0.490383,-99)    );
  // itree = 71
  fBoostWeights.push_back(0.0607766);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514258,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.419575,-99) , 
0, 92.3307, 0, 0, 0.508623,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.566815,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.356449,-99) , 
1, 0.679233, 0, 0, 0.426536,-99) , 
4, 0.039604, 1, 0, 0.502085,-99) , 
NN(
0, 
0, 
-1, 0.300542, 1, -1, 0.32105,-99) , 
0, 156.615, 1, 0, 0.4971,-99)    );
  // itree = 72
  fBoostWeights.push_back(0.0484453);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534334,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.488504,-99) , 
0, 116.285, 1, 0, 0.495236,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512004,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.318308,-99) , 
0, 124.063, 0, 0, 0.43111,-99) , 
4, 0.039604, 1, 0, 0.490157,-99) , 
NN(
0, 
0, 
-1, 0.300542, 1, -1, 0.334439,-99) , 
0, 156.615, 1, 0, 0.485908,-99)    );
  // itree = 73
  fBoostWeights.push_back(0.0521269);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.513875,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.306858,-99) , 
3, 4.0396, 1, 0, 0.510133,-99) , 
NN(
0, 
0, 
-1, 118.941, 1, -1, 0.461861,-99) , 
0, 121.488, 0, 0, 0.497871,-99) , 
NN(
0, 
0, 
-1, 0.300542, 1, -1, 0.345308,-99) , 
0, 156.615, 1, 0, 0.493737,-99)    );
  // itree = 74
  fBoostWeights.push_back(0.0461352);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.534929,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.489406,-99) , 
0, 118.851, 1, 0, 0.497568,-99) , 
NN(
0, 
0, 
-1, 54.2539, 1, -1, 0.424227,-99) , 
4, 0.039604, 1, 0, 0.491803,-99) , 
NN(
0, 
0, 
-1, 0.300542, 1, -1, 0.357185,-99) , 
0, 156.615, 1, 0, 0.48818,-99)    );
  // itree = 75
  fBoostWeights.push_back(0.0444513);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510752,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.428558,-99) , 
0, 94.8972, 0, 0, 0.504968,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50288,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.317034,-99) , 
2, 54.2539, 1, 0, 0.435533,-99) , 
4, 0.039604, 1, 0, 0.499524,-99) , 
NN(
0, 
0, 
-1, 0.300542, 1, -1, 0.367846,-99) , 
0, 156.615, 1, 0, 0.495999,-99)    );
  // itree = 76
  fBoostWeights.push_back(0.0301648);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 94.8972, 0, -1, 0.495418,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.549669,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.372012,-99) , 
1, 0.679233, 0, 0, 0.43227,-99) , 
4, 0.039604, 1, 0, 0.490478,-99) , 
NN(
0, 
0, 
-1, 0.300542, 1, -1, 0.378242,-99) , 
0, 156.615, 1, 0, 0.487488,-99)    );
  // itree = 77
  fBoostWeights.push_back(0.0347155);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.507181,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.446921,-99) , 
0, 94.8972, 0, 0, 0.502959,-99) , 
NN(
0, 
0, 
-1, 67.5675, 1, -1, 0.434495,-99) , 
4, 0.039604, 1, 0, 0.497617,-99) , 
NN(
0, 
0, 
-1, 0.300542, 1, -1, 0.385362,-99) , 
0, 156.615, 1, 0, 0.494636,-99)    );
  // itree = 78
  fBoostWeights.push_back(0.0629453);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.650676,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.599844,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.47082,-99) , 
1, 0.695326, 0, 0, 0.536109,-99) , 
1, 0.463446, 1, 0, 0.578988,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.514379,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.464331,-99) , 
2, 33.5409, 1, 0, 0.491013,-99) , 
NN(
0, 
0, 
-1, 0.232678, 1, -1, 0.254231,-99) , 
0, 156.615, 1, 0, 0.485777,-99) , 
2, 140.77, 0, 0, 0.488822,-99)    );
  // itree = 79
  fBoostWeights.push_back(0.0488663);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.660517,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.496016,-99) , 
2, 103.535, 1, 0, 0.566129,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.410626,-99) , 
0, 117.281, 0, 0, 0.538884,-99) , 
NN(
0, 
0, 
-1, 142.992, 1, -1, 0.481685,-99) , 
2, 75.8569, 0, 0, 0.487953,-99)    );
  // itree = 80
  fBoostWeights.push_back(0.035745);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 178.485, 1, 1, 0.585338,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.506389,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.402627,-99) , 
2, 7.08705, 0, 0, 0.501374,-99) , 
NN(
0, 
0, 
-1, 0.261763, 1, -1, 0.265329,-99) , 
0, 156.615, 1, 0, 0.496315,-99) , 
2, 140.77, 0, 0, 0.499225,-99)    );
  // itree = 81
  fBoostWeights.push_back(0.0479506);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 178.485, 1, 1, 0.576637,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508891,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.467911,-99) , 
2, 25.1871, 0, 0, 0.4933,-99) , 
NN(
0, 
0, 
-1, 0.261763, 1, -1, 0.272355,-99) , 
0, 156.615, 1, 0, 0.488601,-99) , 
2, 140.77, 0, 0, 0.491473,-99)    );
  // itree = 82
  fBoostWeights.push_back(0.048786);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 178.485, 1, 1, 0.56489,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.508674,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.469617,-99) , 
2, 33.5409, 1, 0, 0.490426,-99) , 
NN(
0, 
0, 
-1, 224.439, 0, -1, 0.28196,-99) , 
0, 156.615, 1, 0, 0.486037,-99) , 
2, 140.77, 0, 0, 0.488602,-99)    );
  // itree = 83
  fBoostWeights.push_back(0.126068);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.573728,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.471823,-99) , 
1, 0.473614, 0, 0, 0.524893,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.512911,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.250204,-99) , 
2, 71.5549, 0, 0, 0.381719,-99) , 
4, 0.039604, 1, 0, 0.510673,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.567274,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.460283,-99) , 
2, 25.5385, 0, 0, 0.492231,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.609027,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.368822,-99) , 
2, 40.8532, 0, 0, 0.412414,-99) , 
2, 34.3581, 1, 0, 0.475844,-99) , 
2, 43.4006, 0, 0, 0.487682,-99)    );
  // itree = 84
  fBoostWeights.push_back(0.0878164);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.827186,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.51509,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.312357,-99) , 
1, 0.459692, 1, 0, 0.502578,-99) , 
1, 0.473828, 0, 0, 0.518448,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.520384,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.424528,-99) , 
0, 125.482, 1, 0, 0.493533,-99) , 
NN(
0, 
0, 
-1, 0.747144, 0, -1, 0.373287,-99) , 
0, 127.772, 1, 0, 0.479541,-99) , 
1, 0.483432, 1, 0, 0.496622,-99)    );
  // itree = 85
  fBoostWeights.push_back(0.0516322);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.609975,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.440493,-99) , 
1, 0.325757, 0, 0, 0.544046,-99) , 
NN(
0, 
0, 
-1, 157.405, 1, -1, 0.481262,-99) , 
2, 86.6757, 0, 0, 0.486223,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.344642,-99) , 
4, 1.0297, 1, 0, 0.484711,-99)    );
  // itree = 86
  fBoostWeights.push_back(0.0427055);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.593964,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510676,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.375766,-99) , 
0, 161.85, 1, 0, 0.506718,-99) , 
NN(
0, 
0, 
-1, 0.710106, 0, -1, 0.468468,-99) , 
1, 0.675105, 1, 0, 0.49422,-99) , 
1, 0.947131, 0, 0, 0.496379,-99)    );
  // itree = 87
  fBoostWeights.push_back(0.026055);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 48.9231, 0, 1, 0.555844,-99) , 
NN(
0, 
0, 
-1, 161.85, 1, -1, 0.490926,-99) , 
1, 0.907667, 0, 0, 0.494427,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.35378,-99) , 
4, 1.0297, 1, 0, 0.492935,-99)    );
  // itree = 88
  fBoostWeights.push_back(0.023772);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.609476,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.463898,-99) , 
1, 0.384936, 0, 0, 0.546228,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50054,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.282824,-99) , 
0, 142.992, 1, 0, 0.496296,-99) , 
2, 86.6757, 0, 0, 0.500238,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.359759,-99) , 
4, 1.0297, 1, 0, 0.498753,-99)    );
  // itree = 89
  fBoostWeights.push_back(0.0317115);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.598874,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.462274,-99) , 
1, 0.325757, 0, 0, 0.545533,-99) , 
NN(
0, 
0, 
-1, 142.992, 1, -1, 0.490584,-99) , 
2, 86.6757, 0, 0, 0.494915,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.365253,-99) , 
4, 1.0297, 1, 0, 0.493548,-99)    );
  // itree = 90
  fBoostWeights.push_back(0.023786);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.603013,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.483601,-99) , 
1, 0.473706, 0, 0, 0.543901,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502525,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.294213,-99) , 
0, 142.992, 1, 0, 0.498511,-99) , 
2, 86.6757, 0, 0, 0.502081,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.372636,-99) , 
4, 1.0297, 1, 0, 0.500722,-99)    );
  // itree = 91
  fBoostWeights.push_back(0.0249599);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.591695,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482031,-99) , 
1, 0.384936, 0, 0, 0.543905,-99) , 
NN(
0, 
0, 
-1, 142.992, 1, -1, 0.492793,-99) , 
2, 86.6757, 0, 0, 0.496808,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.378213,-99) , 
4, 1.0297, 1, 0, 0.495567,-99)    );
  // itree = 92
  fBoostWeights.push_back(0.0231283);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.582327,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.482324,-99) , 
1, 0.325757, 0, 0, 0.543168,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.502819,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.304435,-99) , 
0, 142.992, 1, 0, 0.499032,-99) , 
2, 86.6757, 0, 0, 0.502496,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.384101,-99) , 
4, 1.0297, 1, 0, 0.50126,-99)    );
  // itree = 93
  fBoostWeights.push_back(0.0713432);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.216754, 0, 1, 0.555758,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.541456,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.301942,-99) , 
1, 0.152438, 1, 0, 0.403141,-99) , 
2, 20.3804, 0, 0, 0.519416,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50907,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.443835,-99) , 
2, 65.0381, 1, 0, 0.499261,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.510578,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.197279,-99) , 
1, 0.306509, 1, 0, 0.297065,-99) , 
1, 0.316809, 0, 0, 0.489817,-99) , 
1, 0.29598, 1, 0, 0.49615,-99)    );
  // itree = 94
  fBoostWeights.push_back(0.0520077);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 86.1102, 1, 1, 0.56096,-99) , 
NN(
0, 
0, 
-1, 0.889072, 1, -1, 0.399859,-99) , 
1, 0.799195, 1, 0, 0.524302,-99) , 
NN(
0, 
0, 
-1, 142.992, 1, -1, 0.479364,-99) , 
2, 75.8569, 0, 0, 0.484241,-99)    );
  // itree = 95
  fBoostWeights.push_back(0.0289032);
  fForest.push_back( 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.57071,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.787915,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.421059,-99) , 
1, 0.0273093, 0, 0, 0.605117,-99) , 
NN(
0, 
0, 
-1, 0.0825593, 0, -1, 0.490776,-99) , 
1, 0.0468839, 1, 0, 0.493384,-99) , 
1, 0.947131, 0, 0, 0.495054,-99)    );
  // itree = 96
  fBoostWeights.push_back(0.0497917);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.239577, 1, 1, 0.62531,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.522709,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.397198,-99) , 
2, 20.3804, 0, 0, 0.492811,-99) , 
1, 0.225621, 0, 0, 0.522849,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.588104,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.498907,-99) , 
1, 0.363944, 1, 0, 0.504724,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.509067,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.220329,-99) , 
1, 0.306509, 1, 0, 0.314527,-99) , 
1, 0.316809, 0, 0, 0.496094,-99) , 
1, 0.29598, 1, 0, 0.501806,-99)    );
  // itree = 97
  fBoostWeights.push_back(0.0612356);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 116.407, 1, 1, 0.518002,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.35952,-99) , 
0, 142.193, 1, 0, 0.515694,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.610765,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.486029,-99) , 
1, 0.225149, 0, 0, 0.51742,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.228064,-99) , 
1, 0.3032, 1, 0, 0.48621,-99) , 
1, 0.315711, 0, 0, 0.508418,-99)    );
  // itree = 98
  fBoostWeights.push_back(0.0502536);
  fForest.push_back( 
NN(
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.567877,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.424288,-99) , 
1, 0.0644644, 0, 0, 0.545799,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.414086,-99) , 
0, 117.93, 0, 0, 0.523447,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.50276,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.354801,-99) , 
0, 142.193, 1, 0, 0.500682,-99) , 
NN(
0, 
0, 
-1, 0.306509, 1, -1, 0.322746,-99) , 
1, 0.316809, 0, 0, 0.492771,-99) , 
1, 0.29598, 1, 0, 0.499306,-99)    );
  // itree = 99
  fBoostWeights.push_back(0.0662287);
  fForest.push_back( 
NN(
NN(
NN(
0, 
0, 
-1, 0.216754, 0, 1, 0.545491,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.562474,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.329291,-99) , 
1, 0.152438, 1, 0, 0.430488,-99) , 
2, 20.3804, 0, 0, 0.518423,-99) , 
NN(
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.5505,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.484199,-99) , 
1, 0.363944, 1, 0, 0.488471,-99) , 
NN(
NN(
0, 
0, 
-1, 0, 1, 1, 0.505898,-99) , 
NN(
0, 
0, 
-1, 0, 1, -1, 0.247432,-99) , 
1, 0.306509, 1, 0, 0.333826,-99) , 
1, 0.316809, 0, 0, 0.481653,-99) , 
1, 0.29598, 1, 0, 0.489467,-99)    );
   return;
};
 
// Clean up
inline void ReadBDT::Clear() 
{
   for (unsigned int itree=0; itree<fForest.size(); itree++) { 
      delete fForest[itree]; 
   }
}
   inline double ReadBDT::GetMvaValue( const std::vector<double>& inputValues ) const
   {
      // classifier response value
      double retval = 0;

      // classifier response, sanity check first
      if (!IsStatusClean()) {
         std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                   << " because status is dirty" << std::endl;
         retval = 0;
      }
      else {
         if (IsNormalised()) {
            // normalise variables
            std::vector<double> iV;
            iV.reserve(inputValues.size());
            int ivar = 0;
            for (std::vector<double>::const_iterator varIt = inputValues.begin();
                 varIt != inputValues.end(); varIt++, ivar++) {
               iV.push_back(NormVariable( *varIt, fVmin[ivar], fVmax[ivar] ));
            }
            retval = GetMvaValue__( iV );
         }
         else {
            retval = GetMvaValue__( inputValues );
         }
      }

      return retval;
   }

// Instantiate an MLP object
std::string ivars[] = {"f_mass4l",
                       "f_D_bkg_kin",
                       "f_pfmet",
                       "f_Ngood",
                       "f_Nbjets"};
std::vector<std::string> iivars(ivars, ivars + 5);
ReadBDT mlp(iivars);
};

double m4lmelametngoodnbjets(double f_mass4l,
                             double f_D_bkg_kin,
                             double f_pfmet,
                             double f_Ngood,
                             double f_Nbjets)
{
  std::vector<double> inputvars(5);
  inputvars[0]	= f_mass4l;
  inputvars[1]	= f_D_bkg_kin;
  inputvars[2]	= f_pfmet;
  inputvars[3]	= f_Ngood;
  inputvars[4]	= f_Nbjets;
  return mlp.GetMvaValue(inputvars);
}
    